basePath: /
definitions:
  dto.ErrorResponse:
    properties:
      error:
        type: string
      message:
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.LoginResponse:
    properties:
      expiresAt:
        type: string
      message:
        type: string
      token:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.RegisterRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      fullName:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      phoneNumber:
        minLength: 10
        type: string
    required:
    - birthday
    - email
    - fullName
    - password
    - phoneNumber
    type: object
  dto.SuccessResponse:
    properties:
      data: {}
      message:
        type: string
    type: object
  dto.UserResponse:
    properties:
      birthday:
        type: string
      createdAt:
        type: string
      email:
        type: string
      fullName:
        type: string
      id:
        type: integer
      phoneNumber:
        type: string
    type: object
  main.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  main.RegisterRequest:
    properties:
      birthday:
        type: string
      email:
        type: string
      fullName:
        minLength: 2
        type: string
      password:
        minLength: 6
        type: string
      phoneNumber:
        minLength: 10
        type: string
    required:
    - birthday
    - email
    - fullName
    - password
    - phoneNumber
    type: object
host: localhost:3000
info:
  contact:
    email: support@example.com
    name: API Support
  description: A Go Fiber API with JWT authentication, user registration, and login
    functionality built with Clean Architecture
  license:
    name: MIT
    url: https://github.com/boomwarinthorn/aibeex/blob/main/LICENSE
  termsOfService: http://swagger.io/terms/
  title: Fiber Authentication API
  version: "2.0"
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password, returns JWT token
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/main.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: User login
      tags:
      - authentication
  /me:
    get:
      consumes:
      - application/json
      description: Get the current authenticated user's profile information using
        JWT token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get current user information
      tags:
      - user
  /register:
    post:
      consumes:
      - application/json
      description: Register a new user with email, password, full name, phone number,
        and birthday
      parameters:
      - description: User registration information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - authentication
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
